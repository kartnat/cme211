I split my Airfoil class into 6 different methods, including the initialization and string representation methods.  The other 4 methods are where I perform the computations to calculate the lift coefficients and stagnation points, including reading in the data files into a dictionary, calculating the chord length/stagnation points, and finally computing the lift coefficients.  I abstracted the airfoil by way of representing its geometry as a series of points in a dictionary, and thus the panels as 2-dimensional straight line segments connecting consecutive points. Also I decomposed the design of the class into several methods which allow one to test various aspects of the computation, like computing the chord length or stagnation points specifically.  As I wasn't too concerned with other users modifying the dictionaries and other parameters returned by my functions, given that this class has a standalone purpose and is not part of a larger project, I kept all returned attributes public.  Also the files are small and can be redownloaded/uploaded to create new instances of the class, in order to accomplish the real purpose which is simply to compute parameters associated with the files (the read function would create a new data dictionary that is clean, in the case that the original one was tampered with outside the function).

I implemented the prescribed error handling, namely (i) for directories whose names were misspecified and that did not contain all the required files, and (ii) for data that was malformed.  I interepreted this second point as files that contained missing lines or columns (in the case of the two column xy.dat file), and that had inconsistent lengths (like every panel not having a pressure, for example).  I assumed that the data would be numeric, and if not the float conversion would generally raise a ValueError.  
